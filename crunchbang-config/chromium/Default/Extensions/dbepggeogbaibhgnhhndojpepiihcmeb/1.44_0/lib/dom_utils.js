// Generated by CoffeeScript 1.3.3
(function() {
  var DomUtils, root;

  DomUtils = {
    documentReady: (function() {
      var loaded;
      loaded = false;
      window.addEventListener("DOMContentLoaded", function() {
        return loaded = true;
      });
      return function(callback) {
        if (loaded) {
          return callback();
        } else {
          return window.addEventListener("DOMContentLoaded", callback);
        }
      };
    })(),
    addElementList: function(els, overlayOptions) {
      var el, parent, _i, _len;
      parent = document.createElement("div");
      if (overlayOptions.id != null) {
        parent.id = overlayOptions.id;
      }
      if (overlayOptions.className != null) {
        parent.className = overlayOptions.className;
      }
      for (_i = 0, _len = els.length; _i < _len; _i++) {
        el = els[_i];
        parent.appendChild(el);
      }
      document.documentElement.appendChild(parent);
      return parent;
    },
    removeElement: function(el) {
      return el.parentNode.removeChild(el);
    },
    makeXPath: function(elementArray) {
      var i, xpath;
      xpath = [];
      for (i in elementArray) {
        xpath.push("//" + elementArray[i], "//xhtml:" + elementArray[i]);
      }
      return xpath.join(" | ");
    },
    evaluateXPath: function(xpath, resultType) {
      var namespaceResolver;
      namespaceResolver = function(namespace) {
        if (namespace === "xhtml") {
          return "http://www.w3.org/1999/xhtml";
        } else {
          return null;
        }
      };
      return document.evaluate(xpath, document.documentElement, namespaceResolver, resultType, null);
    },
    getVisibleClientRect: function(element) {
      var child, childClientRect, clientRect, clientRects, computedStyle, _i, _j, _k, _len, _len1, _len2, _ref;
      clientRects = element.getClientRects();
      for (_i = 0, _len = clientRects.length; _i < _len; _i++) {
        clientRect = clientRects[_i];
        if (clientRect.top < -2 || clientRect.top >= window.innerHeight - 4 || clientRect.left < -2 || clientRect.left >= window.innerWidth - 4) {
          continue;
        }
        if (clientRect.width < 3 || clientRect.height < 3) {
          continue;
        }
        computedStyle = window.getComputedStyle(element, null);
        if (computedStyle.getPropertyValue('visibility') !== 'visible' || computedStyle.getPropertyValue('display') === 'none' || computedStyle.getPropertyValue('opacity') === '0') {
          continue;
        }
        return clientRect;
      }
      for (_j = 0, _len1 = clientRects.length; _j < _len1; _j++) {
        clientRect = clientRects[_j];
        if (clientRect.width === 0 || clientRect.height === 0) {
          _ref = element.children;
          for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
            child = _ref[_k];
            computedStyle = window.getComputedStyle(child, null);
            if (computedStyle.getPropertyValue('float') === 'none' && computedStyle.getPropertyValue('position') !== 'absolute') {
              continue;
            }
            childClientRect = this.getVisibleClientRect(child);
            if (childClientRect === null) {
              continue;
            }
            return childClientRect;
          }
        }
      }
      return null;
    },
    isSelectable: function(element) {
      var selectableTypes;
      selectableTypes = ["search", "text", "password"];
      return (element.nodeName.toLowerCase() === "input" && selectableTypes.indexOf(element.type) >= 0) || element.nodeName.toLowerCase() === "textarea";
    },
    simulateSelect: function(element) {
      element.focus();
      return element.setSelectionRange(element.value.length, element.value.length);
    },
    simulateClick: function(element, modifiers) {
      var event, eventSequence, mouseEvent, _i, _len, _results;
      modifiers || (modifiers = {});
      eventSequence = ["mouseover", "mousedown", "mouseup", "click"];
      _results = [];
      for (_i = 0, _len = eventSequence.length; _i < _len; _i++) {
        event = eventSequence[_i];
        mouseEvent = document.createEvent("MouseEvents");
        mouseEvent.initMouseEvent(event, true, true, window, 1, 0, 0, 0, 0, modifiers.ctrlKey, false, false, modifiers.metaKey, 0, null);
        _results.push(element.dispatchEvent(mouseEvent));
      }
      return _results;
    },
    flashRect: function(rect) {
      var flashEl;
      flashEl = document.createElement("div");
      flashEl.id = "vimiumFlash";
      flashEl.className = "vimiumReset";
      flashEl.style.left = rect.left + window.scrollX + "px";
      flashEl.style.top = rect.top + window.scrollY + "px";
      flashEl.style.width = rect.width + "px";
      flashEl.style.height = rect.height + "px";
      document.documentElement.appendChild(flashEl);
      return setTimeout((function() {
        return DomUtils.removeElement(flashEl);
      }), 400);
    },
    suppressEvent: function(event) {
      event.preventDefault();
      return event.stopPropagation();
    }
  };

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.DomUtils = DomUtils;

}).call(this);
