// Set bigger hint numbers
register_user_stylesheet(
    "data:text/css," +
        escape(
            "@namespace url(\"http://www.w3.org/1999/xhtml\");\n" +
            "span.__conkeror_hint {\n"+
            "  font-size: 17px !important;\n"+
            "  line-height: 16px !important;\n"+
            "}"));


// Graphical navigation buttons to modeline
load_paths.unshift("chrome://conkeror-contrib/content/");
require("mode-line-buttons.js");
mode_line_add_buttons(standard_mode_line_buttons, true);

// Use char-hints (like Vimium)
hint_digits="asdfjklghweioqrupxcmzv";

url_completion_use_bookmarks = true;
url_completion_use_history = true;
session_pref('browser.history_expire_days', 7);

require("clicks-in-new-buffer.js");
clicks_in_new_buffer_target = OPEN_NEW_BUFFER_BACKGROUND; 
clicks_in_new_buffer_button = 1; //  midclick links in new buffers with
// we'd like to see the # of buffers being loaded 
add_hook("mode_line_hook", mode_line_adder(loading_count_widget), true);
// we don't need a clock
remove_hook("mode_line_hook", mode_line_adder(clock_widget));
editor_shell_command = "emacsclient -c";

// reload conkerorrc with C-c r
interactive("reload-config", "reload conkerorrc",
       function(I) {
          load_rc();
          I.window.minibuffer.message("config reloaded");
       }
);
define_key(default_global_keymap, "C-c r", "reload-config");

// org-protocol stuff
function org_capture (url, title, selection, window) {
    var cmd_str =
        'emacsclient \"org-protocol:/capture:/w/'+url+'/'+title+'/'+selection+'\"';
    if (window != null) {
      window.minibuffer.message('Issuing ' + cmd_str);
    }
    shell_command_blind(cmd_str);
}

interactive("org-capture", "Clip url, title, and selection to capture via org-protocol",
          function (I) {
              org_capture(encodeURIComponent(I.buffer.display_uri_string),
                        encodeURIComponent(I.buffer.document.title),
                                encodeURIComponent(I.buffer.top_frame.getSelection()),
                        I.window);
          });
// capture with C-c c
define_key(content_buffer_normal_keymap, "C-c c", "org-capture");


//require("new-tabs.js");
//require("tab-bar.js");
require("adblockplus.js");
        
require("gmail");
require("facebook");
require("github");
require("twitter");



define_webjump("g", "http://www.google.com/search?q=%s");
define_webjump("gf", "http://www.google.fi/search?q=%s");

define_webjump("emacswiki",
    "http://www.google.com/cse?cx=004774160799092323420%3A6-ff2s0o6yi"+
        "&q=%s&sa=Search&siteurl=emacswiki.org%2F",
    $alternative="http://www.emacswiki.org/");

define_webjump("orgmode-worg","https://www.google.com/cse?cx=002987994228320350715%3Az4glpcrritm&q=%s&sa=Search&siteurl=orgmode.org%2Fworg",$alternative="http://orgmode.org/worg/");// Org-Mode Worg (~Wiki)

define_webjump("gma", "https://mail.google.com/mail/u/0/");
define_webjump("imdb", "http://www.imdb.com/find?q=%s");

define_webjump("yout", "http://www.youtube.com/results?search_query=%s&search=Search");
define_webjump("youtu", "http://youtube.com/profile_videos?user=%s");
define_webjump("dict","http://www.thefreedictionary.com/%s");

define_webjump("down?", function (url) {
    if (url) {
        return "http://downforeveryoneorjustme.com/" + url;
    } else {
        return "javascript:window.location.href='http://downforeveryoneorjustme.com/'+window.location.href;";
   }
}, $argument = "optional");

define_webjump("wayback", function (url) {
    if (url) {
        return "http://web.archive.org/web/*/" + url;
    } else {
        return "javascript:window.location.href='http://web.archive.org/web/*/'+window.location.href;";
    }
}, $argument = "optional");

define_webjump("grep-site", "javascript:window.location.href='http://google.com/search?q=%s+site:'+window.location.host");

define_webjump("clhs",
               "http://www.xach.com/clhs?q=%s",
               $alternative = "http://www.lispworks.com/documentation/HyperSpec/Front/index.htm");

define_webjump("cliki", "http://www.cliki.net/admin/search?words=%s");
define_webjump("img", "http://www.google.com/images?q=%s&safe=off", $alternative = "http://www.google.com/imghp?as_q=&safe=off");
define_webjump("gh", "http://github.com/search?q=%s&type=Everything");
